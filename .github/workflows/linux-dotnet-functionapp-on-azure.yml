name: Deploy DotNet project to Azure Function App

on:
  workflow_dispatch:
  #[push]

env:
  AZURE_FUNCTIONAPP_NAME: '${{ github.event.repository.name }}'
  AZURE_FUNCTIONAPP_PACKAGE_PATH: './src/api'
  DOTNET_VERSION: '8.0.x'

permissions:
  id-token: write
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.TARGET_ENV || 'dev' }}

    steps:
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@v3

    - name: Setup DotNet ${{ env.DOTNET_VERSION }} Environment
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 'Resolve Project Dependencies Using Dotnet'
      shell: bash
      run: |
        pushd '${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
        dotnet build --configuration Release --output ./output
        echo "AZURE_FUNCTIONAPP_PACKAGE=${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/output" >> $GITHUB_ENV
        popd

    - name: 'Login via Azure CLI'
      #if: false
      uses: azure/login@v1
      with:
        #client-id: ${{ secrets.AZURE_CLIENT_ID }}
        #tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        #subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Azure CLI script
      uses: azure/CLI@v1
      with:
        azcliversion: latest
        inlineScript: |
          az account show

    - name: 'Run Azure Functions Action'
      uses: Azure/functions-action@v1
      id: fa
      with:
        app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
        package: ${{ env.AZURE_FUNCTIONAPP_PACKAGE }}
        #publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }}

    - name: E2E Check Result
      shell: bash
      run: |
        set -ex
        curl --head -X GET --retry 5 --retry-connrefused --retry-delay 1 "${{ steps.fa.outputs.app-url }}/HttpApi"

# For more samples to get started with GitHub Action workflows to deploy to Azure, refer to https://github.com/Azure/actions-workflow-samples
